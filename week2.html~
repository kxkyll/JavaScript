<!DOCTYPE html>
<html>
  <head>
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="chrome=1">
    <link href='https://fonts.googleapis.com/css?family=Chivo:900' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" type="text/css" href="stylesheets/stylesheet.css" media="screen" />
    <link rel="stylesheet" type="text/css" href="stylesheets/pygment_trac.css" media="screen" />
    <link rel="stylesheet" type="text/css" href="stylesheets/print.css" media="print" />
    <!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <title>Javascript by kxkyll</title>
  </head>

  <body>
    <div id="container">
      <div class="inner">

        <header>
          <h1>Javascript</h1>
          <h2>2. viikko</h2>
        </header>
	
	<p><em>Tekijät:</em> Marko Haanranta, Kasper Kivikataja,  Kati Kyllönen, Jussi Miestamo</p>

	<p>
		<a href="index.html">Pääsivu</a> <br />
		<a href="week2.html">2. viikko</a> <br />
		<a href="week3.html">3. viikko</a> <br />
		<a href="week4.html">4. viikko</a> <br />
	</p>

<p>Javascriptissä muuttujat ja parametrit ovat tyypittömiä, mutta niiden arvoilla on tyypit. Javascriptin tietotyypit ovat merkkijono (string), luku (number), totuusarvo (boolean), taulukko (array), objekti (object), olematon (null) ja määrittelemätön (undefined). Vaikka muuttujilla ei olekaan tyyppiä, on arvojen tyyppejä syytä tarkistaa, jotta ohjelmat eivät tuottaisi odottamattomia tuloksia. Erityisesti käyttäjän syötteitä on hyvä tarkastella virheiden varalta. Javascriptissä yhteenlasku voidaan suorittaa ongelmitta luvun ja String-tyypin olion välillä.</p>

<div class="highlight"><pre><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">)}</span>
<span class="nx">write</span><span class="p">(</span><span class="nx">sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="s2">"w4"</span><span class="p">))</span>                          <span class="c1">//tulostaa "2w4"</span>
</pre></div>

<p>Javascript tarjoaa - kuten tunnettua - funktiot <code>parseInt()</code> ja <code>parseFloat()</code> kokonais- tai liukulukujen eristämiseen syötteestä: jos syöte alkaa numerolla, siitä erotetaan numero-osa, ja loppu jätetään huomiotta. Joissain tapauksessa tämä on täysin riittävä tapa varmistaa se, että syöte on kelvollista. Jos ohjelmoija odottaa saavansa syötteenä esimerkiksi kokonaisluvun, vaaraa ei ole, koska <code>parseInt()</code> palauttaa aina kokonaisluvun tai tietotyypin <code>undefined</code>. Tietysti ohjelmakoodin pitää olla rakennettu niin, että <code>undefined</code>:iin on varauduttu, mutta käytettiin mitä tahansa keinoa tyyppien tarkastamiseen, <code>Undefined</code>:iin on joka tapauksessa aina varauduttava, jotta ohjelman toiminta olisi ennakoitavaa.</p>

<p>Vaikka yllä oleva esimerkki on yksinkertainen, pelkkä <code>Undefined</code>:iin varautuminen ei riitä. Koska oletettavaa on, että käyttäjä (tai funktiota kutsuva ohjelmoija) ei kirjoita syötteeseen lainausmerkkejä, esimerkin syötteen tekee kelvottomaksi todennäköisemmin käyttäjän lyöntivirhe:</p>

<div class="highlight"><pre><span class="n">write</span><span class="p">(</span><span class="n">sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">w4</span><span class="p">))</span>                   <span class="c1">//Tulostaa konsoliin ReferenceError: w4 is not defined;</span>
</pre></div>

<p>Tällaisten tilanteiden varalta pitäisikin tarkistaa, onko syöte ylipäätään kokonaisluku. On onnekasta, jos syöte alkaa numeroilla, mutta jos ei ala, <code>parseInt()</code> ei pelasta.</p>

<p>Tyyppien tarkistus ohjelmakoodissa on erityisen tärkeää juuri käyttäjän syötettä käsiteltäessä...</p>

<p>Ehdotus kirjastofunktiosta tyyppitarkastusten tekemiseksi.</p>

<ul>
<li>Tarkastusfunktio onko muuttujassa arvo</li>
</ul><div class="highlight"><pre><span class="kd">function</span> <span class="nx">hasValue</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">false</span>
<span class="p">}</span>
</pre></div>

<ul>
<li>Tarkastusfunktio numerolle</li>
</ul><div class="highlight"><pre><span class="kd">function</span> <span class="nx">isNumber</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">'number'</span>
<span class="p">}</span>
</pre></div>

<ul>
<li>Tarkastusfunktio kokonaisluvulle (jos value = 1.0, eli kun desimaaliosa on nolla, niin tulkitaan kokonaisluvuksi)</li>
</ul><div class="highlight"><pre><span class="kd">function</span> <span class="nx">isInteger</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">value</span> <span class="o">===</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

<ul>
<li>Tarkastusfunktio desimaaliluvulle (jos desimaaliosa on nolla, niin ei tulkita desimaaliluvuksi)</li>
</ul><div class="highlight"><pre><span class="kd">function</span> <span class="nx">isDouble</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">return</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s2">"number"</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span> <span class="o">!==</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>
se onko tälle käytännössä tarvetta, herätti keskustelua ryhmässämme. Toisaalta monet kirjastofunktiot tarjoavat usein palveluja, joiden käyttötarkoitusta voi vain arvailla.

<ul>
<li>Tarkastusfunktio merkkijonolle (tässä tyhjä merkkijono tulkitaan merkkijonoksi)</li>
</ul><div class="highlight"><pre><span class="kd">function</span> <span class="nx">isString</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">'string'</span>
<span class="p">}</span>
</pre></div>

<ul>
<li>Tarkastusfunktio funktiolle</li>
</ul><div class="highlight"><pre><span class="n">function</span> <span class="nf">isFunction</span><span class="p">(</span><span class="n">func</span><span class="p">)</span> <span class="p">{</span>
   <span class="n">var</span> <span class="n">getType</span> <span class="o">=</span> <span class="p">{};</span>
   <span class="k">return</span> <span class="n">func</span> <span class="o">&amp;&amp;</span> <span class="n">getType</span><span class="p">.</span><span class="n">toString</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="n">func</span><span class="p">)</span> <span class="o">===</span> <span class="err">'</span><span class="p">[</span><span class="n">object</span> <span class="n">Function</span><span class="p">]</span><span class="err">'</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<ul>
<li>Tarkastusfunktio objektille</li>
</ul><div class="highlight"><pre><span class="kd">function</span> <span class="nx">isObject</span><span class="p">(</span><span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">return</span> <span class="k">typeof</span> <span class="nx">object</span> <span class="o">===</span> <span class="s1">'object'</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<ul>
<li>Tarkastusfunktio arraylle</li>
</ul><div class="highlight"><pre><span class="kd">function</span> <span class="nx">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">value</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<ul>
<li>Tarkastusfunktio booleanille</li>
</ul><div class="highlight"><pre><span class="kd">function</span> <span class="nx">isBoolean</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">return</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">'boolean'</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p>Esimerkkejä tyyppiturvallisuutta tavoittelevasta ohjelmointityylistä</p>

<p>Yleisen tason pohdiskelua tyyppiturvallisuuden tavoittelusta</p>

<p>Lomakkeiden validointi</p>

<ul>
<li>Javascript kuitenkin luotu nettisivuja varten, sikäli on siis hiukan keinotekoista yrittää irrottaa JS:ää html:stä. Tässä siksi siis puhutaan stringien validoinnin yhteydessä lomakkeista ja tietysti säännöllisistä lausekkeista.</li>
</ul><p>Lähteet: </p>

<p><a href="http://www.w3schools.com/js/js_datatypes.asp">http://www.w3schools.com/js/js_datatypes.asp</a></p>

<p><a href="http://www.cs.helsinki.fi/u/wikla/OTjs/materiaalia/tyyppeja/">http://www.cs.helsinki.fi/u/wikla/OTjs/materiaalia/tyyppeja/</a></p>

<p><a href="http://united-coders.com/matthias-reuter/handling-the-unexpected-type-safe-functions-in-javascript/">http://united-coders.com/matthias-reuter/handling-the-unexpected-type-safe-functions-in-javascript/</a></p>
   	

        <footer>
          Javascript is maintained by <a href="https://github.com/kxkyll">kxkyll</a><br>
          This page was generated by <a href="http://pages.github.com">GitHub Pages</a>. Tactile theme by <a href="https://twitter.com/jasonlong">Jason Long</a>.
        </footer>

        
      </div>
    </div>
  </body>
</html>
